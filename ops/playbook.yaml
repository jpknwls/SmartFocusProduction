---
- hosts: all


  vars:
    _local_code_root: "../.."
    project_home: /home/{{ user }}/app
    nginx_default_root: /usr/share/nginx/html
    certbot_webroot: "{{ nginx_default_root }}"
    letsencrypt_live_root: /etc/letsencrypt/live
    ssl: true

    push_mode: none
    # To be overridden in --extra-vars when needed.
    #
    # Available push modes:
    # none (default): app code is not pushed, assumed to be mirrored
    # rsync: users Ansible’s wrapper around rsync to push app code
    #
    # When deploying onto a remote system,
    # pass push mode to Ansible with --extra-vars, e.g.:
    # $ ansible-playbook ... --extra-vars push_mode=rsync

    load_initial_data: no
    # To be overridden in --extra-vars when needed.
    #
    # This flag instructs Django to load pre-made data fixtures into the DB.
    # Typically used on first deployments only.
    #
    # NOTE: This overwrites any existing objects.
    # E.g., if you load data into app and then something in DB changes
    # and you load data again, you will lose those changes.

    initial_data_fixture_path:
      "{{ project_home }}/src/smartfocus/fixtures/initial_data.json"

  vars_files:
    - vars.yaml
    - "{{ inventory_dir }}/vars.yaml"


  tasks:

    - name: add certbot ppa
      become: true
      apt_repository: repo='ppa:certbot/certbot'
      tags: system

    - name: add deadsnakes ppa
      become: true
      apt_repository: repo='ppa:fkrull/deadsnakes-python2.7'
      tags: system

    - name: update apt cache
      become: true
      apt: update_cache=yes
      tags: system

    - name: install basic apt packages
      become: true
      apt: name={{ item }} state=present
      with_items:
        - vim
        - certbot
        - nginx
        - python-dev
        - python-pip
        - gunicorn
      tags: system

    - name: upgrade apt packages
      become: true
      apt: upgrade=safe
      tags: system, ssl




      # For certbot/letsencrypt to work
    - name: enable default nginx vhost
      become: true
      file:
        src=/etc/nginx/sites-available/default
        dest=/etc/nginx/sites-enabled/default
        state=link
      tags: ssl

    - name: set up ssl cert
      become: true
      command: certbot certonly --non-interactive --agree-tos --email {{ ssl_email }} --webroot -w {{ certbot_webroot }} -d {{ domain_name }}
      # If this doesn’t work, it’s likely because of using an IP in dev.
      ignore_errors: yes
      tags: ssl

    - name: disable default nginx vhost
      become: true
      file: path=/etc/nginx/sites-enabled/default state=absent
      tags: nginx, ssl

    - name: create our nginx vhost
      become: true
      template:
        src=templates/nginx_vhost.conf.j2
        dest=/etc/nginx/sites-available/{{ appname }}
      tags: nginx

    - name: symlink our nginx vhost
      become: true
      file:
        src=/etc/nginx/sites-available/{{ appname }}
        dest=/etc/nginx/sites-enabled/{{ appname }} state=link
      notify:
        - restart nginx
      tags: nginx

    - name: start nginx
      become: true
      service: name=nginx state=started
      tags: nginx




    - name: upload app code
      synchronize:
        src: "{{ _local_code_root }}"
        dest: "{{ project_home }}"
      when: push_mode == "rsync"
      tags: webapp, app-code, static
      notify:
        - restart gunicorn




    - name: install pip requirements
      become: true
      pip: requirements={{ project_home }}/src/ops/requirements.txt
      tags: webapp, pip-deps
      notify:
        - restart gunicorn

    - name: upload django settings
      template:
        src=templates/django_settings.py.j2
        dest={{ project_home }}/src/{{ appname }}/settings.py
      tags: webapp, django-settings, app-code




    - name: create dir for gunicorn's socket file
      become: true
      file: state=directory path=/var/run/gunicorn
      tags: gunicorn

    - name: install gunicorn
      become: true
      pip: name=gunicorn
      tags: gunicorn

    - name: configure gunicorn
      become: true
      template:
        src=templates/gunicorn_app.py.j2
        dest=/etc/gunicorn.d/{{ appname }}.conf
      notify:
        - restart gunicorn
      tags: gunicorn




    - name: set in place db schema
      django_manage:
        app_path={{ project_home }}/src
        command={{ item }}
      with_items:
        - migrate
        - collectstatic
      tags: webapp, static, django-commands

    - name: load initial data
      django_manage:
        app_path={{ project_home }}/src
        command="loaddata {{ initial_data_fixture_path }}"
      when: load_initial_data|bool
      tags: webapp, load-initial-data, django-commands




  handlers:
    - name: restart nginx
      become: true
      service: name=nginx state=restarted

    - name: restart gunicorn
      become: true
      service: name=gunicorn state=restarted
